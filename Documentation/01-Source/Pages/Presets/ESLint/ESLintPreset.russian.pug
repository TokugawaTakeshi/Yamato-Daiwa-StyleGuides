extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("ESLint"),
        description: ""
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("presets.ESLint");

    LanguageDropDownList__YDF_DK.setLinks({
      english: "./ESLintPreset.english.html",
      japanese: "./ESLintPreset.japanese.html",
    });

    const pageTableOfContents = localizedRouting.presets.$children.ESLint.$sectioning;


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ ESLint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({ level: 1, text: localizedRouting.presets.$children.ESLint.$heading }).Article-Heading1

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.guidance
    }) Перевод цитат выполнен с улучшением стилистики и добавлением уточнений, а потому не является дословным.

    //- ━━━ Общие правила для TypeScript и JavaScript ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.ECMAScriptCommonRules.$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$anchor
    }).Article-Heading2

    //- ─── Валидность ECMAScript-кода ─────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      Стандарт #[+ImportantEntity--YDID ECMA-Script] является довольно либеральным, позволяя писать бессмысленный код
        зачастую #[+Keyphrase--YDID без ошибок при его выполнении].
      Например, можно в #[+Term--YDID классе] объявить #[+Term--YDID геттер], который ничего
        #[+Keyword--YDID не]&nbsp;возвращает, что противоречит самой концепции #[+Term--YDID геттеров].
      Задача правил это группы — значительно уменьшить количество такого бессмысленного кода.


    //- ─── array-callback-return ──────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["array-callback-return"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["array-callback-return"].$anchor
    }).Article-Heading4

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "array-callback-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+ImportantEntity__Code--YDID Array] имеет несколько #[+Term--YDID методов] для фильтрации, маппинга и
          сворачивания.
        Если мы не укажем инструкцию возврата значения в #[+Term--YDID функциях обратного вызова] этих
          #[+Term--YDID методов], то возможно, это ошибка.
        Если вы не&nbsp;хотите возвращать значение или не&nbsp;нуждаетесь в возвращённом значении, то вместо этих
          #[+Term--YDID методов] рассмотрите использование #[+ImportantEntity__Code--YDID .forEach].

      p.Article-Paragraph.
        #[+ImportantEntity__Code--YDID Array] has several #[+Term--YDID methods] for filtering, mapping, and folding.
        If we forget to write return statement in a #[+Term--YDID callback] of those, it’s probably a mistake.
        If you don’t want to use a return or don’t need the returned results, consider using
          #[+ImportantEntity__Code--YDID .forEach] instead.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/array-callback-return"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      При использовании языка #[+ImportantEntity--YDID TypeScript] с настроенным оповещением об ошибках, подобного рода
        странности будут сразу же обнаружены, поскольку все стандартные #[+Term--YDID методы] (в том числе и
        #[+Term--YDID массивов]) имеют качественные определения #[+Term--YDID TypeScript-типов].
      Поэтому #[+Keyphrase--YDID в случае использования #[+ImportantEntity--YDID TypeScript]] это правило —
        перестраховочное.


    //- ─── constructor-super ──────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["constructor-super"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["constructor-super"].$anchor
    }).Article-Heading4

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "constructor-super": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID Конструкторы] #[+Keyword--YDID унаследованных] #[+Term--YDID классов] #[+Keyword--YDID должны]
          вызывать #[+ImportantEntity__Code--YDID super()].
        #[+Term--YDID Конструкторы] #[+Term__Contrast--YDID классов], которые #[+Keyword--YDID не]&nbsp;унаследованы,
          #[+ImportantEntity__Code--YDID super()] вызывать #[+Keyword--YDID не]&nbsp;должны.
        Если это не&nbsp;замечено (программистом), произойдёт #[+Term--YDID ошибка] выполнения
          #[+Term--YDID JavaScript-кода].

      p.Article-Paragraph.
        #[+Term--YDID Constructors] of #[+Keyword--YDID derived] #[+Term--YDID classes] #[+Keyword--YDID must] call
          #[+ImportantEntity__Code--YDID super()].
        Constructors of #[+Keyword--YDID non] derived #[+Term--YDID classes] must&nbsp;#[+Keyword--YDID not]&nbsp;call
          #[+ImportantEntity__Code--YDID super()].
        If this is not observed, the #[+ImportantEntity--YDID JavaScript] engine will raise a runtime error.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/constructor-super"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      Если в #[+Term--YDID конструкторе] #[+Keyword--YDID унаследованного] #[+Term--YDID класса] обратиться к
        #[+Term--YDID контекстной переменной] #[+ImportantEntity__Code--YDID this] до вызова
        #[+ImportantEntity__Code--YDID super()], то язык #[+ImportantEntity__Code--YDID TypeScript] оповестит об
        #[+Term--YDID ошибке] #[+ImportantEntity__Code--YDID TS2377].
      Что касается #[+ImportantEntity--YDID JavaScript], то без данного #[+ImportantEntity--YDID ESLint]-правила
        это ошибку способны заметить лишь лучшие #[+Term--YDID интегрированные среды разработки], такие как
        #[+SecondaryEntity--YDID IntelliJ IDEA].


    //- ─── getter-return ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["getter-return"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["getter-return"].$anchor
    }).Article-Heading4

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "getter-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID Синтаксис] #[+ImportantEntity__Code--YDID get] привязывает #[+Term--YDID свойство]
          #[+Term__Contrast--YDID объекта] к #[+Term--YDID функции], которая будет вызвана при обращении к этому
          #[+Term--YDID свойству].
        Эта функциональнсоть доступная начиная со стандарта #[+ImportantEntity--YDID ECMAScript 5].
        Предполагается, что #[+Keyword--YDID каждый] #[+Term--YDID геттер] #[+Keyword__Contrast--YDID должен]
          вернуть значение.

      p.Article-Paragraph.
        The #[+ImportantEntity__Code--YDID get] #[+Term--YDID syntax] binds an #[+Term--YDID object]
          #[+Term__Contrast--YDID property] to a #[+Term--YDID function] that will be called when that
          #[+Term--YDID property] is looked up.
        It was first introduced in #[+ImportantEntity--YDID ECMAScript 5].
        Note that #[+Keyword--YDID every] #[+Term--YDID getter] is #[+Keyword--YDID expected] to return a value.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/getter-return"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      Если код написан на #[+ImportantEntity--YDID TypeScript], то компилятор (вернее сказать, транспайлер) оповестит
        об ошибке #[+ImportantEntity--YDID TS2378].
      Если же код написан на #[+ImportantEntity--YDID JavaScript], то даже такие передовые интегрированные среды
        разработки, как #[+ImportantEntity--YDID IntelliJ IDEA] не поднимут тревоги (проверено на версии
        #[+ImportantEntity--YDID 2024.1.1]).

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "getter-return": "error" }


        #[+SecondaryEntity--YDID 2024.1.1]).
    //- ─── Предотвращение алгоритмических ошибок ──────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.algorithmicErrorsPreventing.$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.algorithmicErrorsPreventing.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      В отличие от предыдущей группы правил, нарушения данной могут быть представлены валидным кодом, однако с высокой
        вероятностью являются алгоритмической ошибкой.
      Данные правила также достаточно хорошо прокомментированы официальной документацией, для многих из них мы
        ограничимся ещё переводом с улучшением стилистики.

    //- ─── for-direction ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.algorithmicErrorsPreventing.$children["for-direction"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.algorithmicErrorsPreventing.$children["for-direction"].$anchor
    }).Article-Heading4

    +Blockquote--YDF

      p.Article-Paragraph.
        A #[+ImportantEntity--YDID for] loop with a stop condition that can never be reached, such as one with a
          counter that moves in the wrong direction, will run infinitely.
        While there are occasions when an infinite loop is intended, the convention is to construct such loops as
          #[+ImportantEntity__Code--YDID while] loops.
        More typically, an infinite for loop is a bug.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/for-direction"
        }).Article-Link Официальная документация ESLint

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "for-direction": "error" }


    //- ─── no-async-promise-executor ──────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["no-async-promise-executor"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["no-async-promise-executor"].$anchor
    }).Article-Heading4

    +Blockquote--YDF

      p.Article-Paragraph.
        The #[+Term--YDID executor function] can also be an async function.
        However, this is usually a mistake, for a few reasons:

      ul.Article-UnorderedList

        li.
          If an #[+Keyword--YDID async] #[+Term--YDID executor function] throws an #[+Term__Contrast--YDID error], the
            #[+Term--YDID error] will be #[+Keyword--YDID lost] and won’t cause the newly-constructed
            #[+ImportantEntity__Code--YDID Promise] to reject.
          This could make it difficult to debug and handle some errors.

        li.
          If a #[+ImportantEntity__Code--YDID Promise] executor function is using #[+ImportantEntity__Code--YDID await],
            this is usually a sign that it is not actually necessary to use the
            #[+ImportantEntity__Code--YDID new Promise] constructor, or the scope of the
            #[+ImportantEntity__Code--YDID new Promise] constructor can be reduced.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/no-async-promise-executor"
        }).Article-Link Официальная документация ESLint

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "no-async-promise-executor": "error" }


    //- ─── Другие правила ─────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.other.$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.other.$anchor
    }).Article-Heading3

    //- ─── no-await-in-loop ──────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.other.$children["no-await-in-loop"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.other.$children["no-await-in-loop"].$anchor
    }).Article-Heading4

    +Blockquote--YDF

      p.Article-Paragraph.

        Performing an operation on each element of an iterable is a common task.
        However, performing an await as part of each operation is an indication that the program is not taking
          full advantage of the parallelization benefits of async/await.

      p.Article-Paragraph.

        Usually, the code should be refactored to create all the promises at once, then get access to the results
          using Promise.all().
        Otherwise, each successive operation will not start until the previous one has completed.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/no-await-in-loop"
        }).Article-Link Официальная документация ESLint

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "no-await-in-loop": "error" }

    p.Article-Paragraph.
      Данное правило применимо тогда и только тогда, когда промисы независимы друг от друга.
      Однако это далеко не всегда так (например, последовательное выполнение асинхронных функций-посредников,
        обрабатывающих HTTP-запрос, где каждый следующий посредник должен быть выполнен тогда и только тогда,
        когда предыдущий отработал и передал управление).

    p.Article-Paragraph.
      Тем не менее, поскольку по возможности следует использовать параллелизм, как и рекомендовано официальной
        документацией, то нарушая данное правило, необходимо добавить комментарий, явно указывающий, почему промисы
        действительно выполняться последовательно.


    //- ━━━ Правила для TypeScript ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.typeScriptRules.$heading,
      HTML_ID: pageTableOfContents.typeScriptRules.$anchor
    }).Article-Heading2

    //- ─── Безопасность типизации ─────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.typeScriptRules.$children.typeSafety.$heading,
      HTML_ID: pageTableOfContents.typeScriptRules.$children.typeSafety.$anchor
    }).Article-Heading3

    //- ─── @typescript-eslint/consistent-type-assertions ──────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.typeScriptRules.$children.typeSafety.$children["consistent-type-assertions"].$heading,
      HTML_ID: pageTableOfContents.typeScriptRules.$children.typeSafety.$children["consistent-type-assertions"].$anchor
    }).Article-Heading4

    +Blockquote--YDF

      p.Article-Paragraph.
        This rule aims to standardize the use of type assertion style across the codebase.
        Keeping to one syntax consistently helps with code readability.

      p.Article-Paragraph.
        (Примечание) Хотя это об этом сводке и не написано, данное правило может и полностью запретить использование
          данной функциональности.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://typescript-eslint.io/rules/consistent-type-assertions/"
        }).Article-Link Официальная документация typescript-eslint

    p.Article-Paragraph.
      В идеале, кастинг использоваться не должен вообще, однако реальность такова, что иногда альтернатив особо и нет.
      Тем не менее, если кастинг разрешить, то сразу же начнётся злоупотребление этой функциональностью.
      Поэтому, наш пресет запрещает использование данной функциональности, а если по какой-то причине использовать
        данную функциональность необходимо, то программист обязан это прокомментировать.

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "@typescript-eslint/consistent-type-assertions": [ "error", { "assertionStyle": "never" } ] }
