extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("ESLint"),
        description: ""
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("presets.ESLint");

    LanguageDropDownList__YDF_DK.setLinks({
      japanese: "./ESLintPreset.japanese.html",
      russian: "./ESLintPreset.russian.html",
    });

    const pageTableOfContents = localizedRouting.presets.$children.ESLint.$sectioning;


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ ESLint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({ level: 1, text: localizedRouting.presets.$children.ESLint.$heading }).Article-Heading1

    //- ━━━ Common Rules for TypeScript and JavaScript ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.ECMAScriptCommonRules.$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$anchor
    }).Article-Heading2

    //- ─── ECMAScript Code Validity ───────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      The #[+ImportantEntity--YDID ECMA-Script] standard is pretty liberal because it is allowing to write the
        meaningless code frequently #[+Keyphrase--YDID without runtime errors].
      For example, in the #[+Term--YDID class] declaration, it is possible to declare #[+Term--YDID getter] which
        return nothing that is contradicting to the #[+Term--YDID getter] concept.
      The target of this group's rules is significantly decrease the volume of such meaningless code.


    //- ─── array-callback-return ──────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["array-callback-return"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["array-callback-return"].$anchor
    }).Article-Heading4

    +CodeViewer--YDF({ title: "Rule Configuration" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "array-callback-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+ImportantEntity__Code--YDID Array] has several #[+Term--YDID methods] for filtering, mapping, and folding.
        If we forget to write return statement in a #[+Term--YDID callback] of those, it’s probably a mistake.
        If you don’t want to use a return or don’t need the returned results, consider using
          #[+ImportantEntity__Code--YDID .forEach] instead.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/array-callback-return"
        }).Article-Link Official ESLint documentation

    p.Article-Paragraph.
      If to use the #[+ImportantEntity--YDID TypeScript] with set up of notification about error, such weird this will
        be detected immideatly because all standard #[+Term--YDID methods] (including the #[+Term--YDID methods] of
        #[+Term__Contrast--YDID arrays]) are known for #[+ImportantEntity--YDID TypeScript].
      Thus, #[+Keyphrase--YDID in the case of #[+ImportantEntity--YDID TypeScript] usage], such rule is like the
        fallback.


    //- ─── constructor-super ──────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["constructor-super"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["constructor-super"].$anchor
    }).Article-Heading4

    +CodeViewer--YDF({ title: "Rule Configuration" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "constructor-super": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID Constructors] of #[+Keyword--YDID derived] #[+Term--YDID classes] #[+Keyword--YDID must] call
          #[+ImportantEntity__Code--YDID super()].
        Constructors of #[+Keyword--YDID non] derived #[+Term--YDID classes] must&nbsp;#[+Keyword--YDID not]&nbsp;call
          #[+ImportantEntity__Code--YDID super()].
        If this is not observed, the #[+ImportantEntity--YDID JavaScript] engine will raise a runtime error.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/constructor-super"
        }).Article-Link Official ESLint documentation

    p.Article-Paragraph.
      If to access to #[+ImportantEntity__Code--YDID this] (the #[+Term--YDID context variable]) is the
        #[+Keyphrase--YDID inherited] #[+Term--YDID class] before #[+ImportantEntity__Code--YDID super()]
        #[+Term--YDID invocation], the #[+ImportantEntity--YDID TypeScript] will emit the
        #[+ImportantEntity__Code--YDID TS2377] #[+Term--YDID error].
      About pure #[+ImportantEntity--YDID JavaScript], without this #[+Term--YDID ESLint] rule such error could be
        detected only by best #[+Term--YDID IDEs] such as #[+SecondaryEntity--YDID IntelliJ IDEA].


    //- ─── getter-return ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      text: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["getter-return"].$heading,
      HTML_ID: pageTableOfContents.ECMAScriptCommonRules.$children.codeValidity.$children["getter-return"].$anchor
    }).Article-Heading4

    +CodeViewer--YDF({ title: "Rule Configuration" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "getter-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        The #[+ImportantEntity__Code--YDID get] #[+Term--YDID syntax] binds an #[+Term--YDID object]
          #[+Term__Contrast--YDID property] to a #[+Term--YDID function] that will be called when that
          #[+Term--YDID property] is looked up.
        It was first introduced in #[+ImportantEntity--YDID ECMAScript 5].
        Note that #[+Keyword--YDID every] #[+Term--YDID getter] is #[+Keyword--YDID expected] to return a value.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/getter-return"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      If the code has been written on #[+ImportantEntity--YDID TypeScript], the compiler (if more exactly — transpiler)
        will notify about #[+ImportantEntity--YDID TS2378] error.
      If the code has been written on plain #[+ImportantEntity--YDID JavaScript], even leading IDEs like
        #[+ImportantEntity--YDID IntelliJ IDEA] will not notify about this issue (checked on
        #[+SecondaryEntity--YDID 2024.1.1] version).
