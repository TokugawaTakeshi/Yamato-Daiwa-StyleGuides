extends ../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../SharedAssets/Markup/SharedAssets.japanese.pug
  include ../../../../SharedComponents/SharedComponents.japanese.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("ESLint"),
        description: ""
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("presets.ESLint.general");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.presets.$children.ESLint.$children.general.$URI,
      russian: routing.russian.presets.$children.ESLint.$children.general.$URI
    });

    const {
      $sectioning: localizedSectioning,
      $heading: topHeading
    } = routing.japanese.presets.$children.ESLint.$children.general;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ TypeScript・JavaScript共通規則 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1= topHeading

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.guidance
    }) 引用の和訳は直訳には#[+Keyword--YDID 成っていなく]、表現改善や明徴が追加された事が有る。


    //- ━━━ ECMAScriptコードの妥当性 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.codeValidity.$heading,
      HTML_ID: localizedSectioning.codeValidity.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+ImportantEntity--YDID ECMA-Script]規格が可成り自由主義らしいので、意味の無いコードを書いても、
        #[+Keyphrase--YDID 実行の際エラーが発生しない]事が多い。
      例えば、#[+Term--YDID クラス]宣言の中に何も返さない#[+Term--YDID ゲッター]を追加する事は出来るが、#[+Term--YDID ゲッター]の概念上意味が無い
        事だ。
      此の規則群の目的は、こう言った意味の無いコードを大幅に減らす事。


    //- ─── array-callback-return ──────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.codeValidity.$children["array-callback-return"].$heading,
      HTML_ID: localizedSectioning.codeValidity.$children["array-callback-return"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "規則の設定" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "array-callback-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+ImportantEntity__Code--YDID Array]#[+Term--YDID オブジェクト]はフィルタリング、各要素の変換及び縮小
          （#[+Term--YDID 配列]を元に単一の値の算出）専用複数の#[+Term--YDID メソッド]が在る。
        これらの呼び出しの際、#[+Term--YDID 引数]として渡される#[+Term--YDID コールバック]の中に値が返されなかったら、間違いの可能性が高い。
        値を返したくないか、返された値が不要な場合、代わりに#[+ImportantEntity__Code--YDID .forEach]の利用を検討しなさい。

      p.Article-Paragraph.
        #[+ImportantEntity__Code--YDID Array] has several #[+Term--YDID methods] for filtering, mapping, and folding.
        If we forget to write return statement in a #[+Term--YDID callback] of those, it’s probably a mistake.
        If you don’t want to use a return or don’t need the returned results, consider using
          #[+ImportantEntity__Code--YDID .forEach] instead.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/array-callback-return"
        }) ESLintの正式的説明書

    p.Article-Paragraph.
      #[+ImportantEntity--YDID TypeScript]言語の利用の上エラーの通知を設定すると、
        #[+Keyword--YDID 全]#[+Keyword__Contrast--YDID 規定]#[+Term--YDID メソッド]（#[+Term--YDID 配列]
        の#[+Term--YDID メソッド]を含めて）が#[+Keyword--YDID 取り組みの]型定義が付いているので、こう言った可笑しい所が直ぐ発見される。
      それで、#[+Keyphrase--YDID #[+ImportantEntity--YDID TypeScript]が利用される環境にとって]此の規則は再保険役。


    //- ─── constructor-super ──────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.codeValidity.$children["constructor-super"].$heading,
      HTML_ID: localizedSectioning.codeValidity.$children["constructor-super"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "規則の設定" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "constructor-super": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Keyword--YDID 継承された]#[+Term--YDID クラス]の#[+Term__Contrast--YDID コンストラクタ]は
          #[+ImportantEntity__Code--YDID super()]を#[+Keyword--YDID 呼び出さなければいけない]。
        #[+Keyword__Contrast--YDID 継承されなかった]#[+Term--YDID クラス]の#[+Term__Contrast--YDID コンストラクタ]は
          #[+Keyword--YDID 逆に]#[+ImportantEntity__Code--YDID super()]を#[+Keyword--YDID 呼び出してはならない]。
        上記の違反をすると#[+ImportantEntity--YDID JavaScript]がランタイムエラーを発生させる。

      p.Article-Paragraph.
        #[+Term--YDID Constructors] of #[+Keyword--YDID derived] #[+Term--YDID classes] #[+Keyword--YDID must] call
          #[+ImportantEntity__Code--YDID super()].
        Constructors of #[+Keyword--YDID non] derived #[+Term--YDID classes] must&nbsp;#[+Keyword--YDID not]&nbsp;call
          #[+ImportantEntity__Code--YDID super()].
        If this is not observed, the #[+ImportantEntity--YDID JavaScript] engine will raise a runtime error.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/constructor-super"
        }) ESLintの正式的説明書

    p.Article-Paragraph.
      #[+Keyword--YDID 継承された]#[+Term--YDID クラス]の#[+Term__Contrast--YDID コンストラクタ]の中に
        #[+ImportantEntity__Code--YDID this]と言う#[+Term--YDID コンテキスト変数]にアクセスしてみると、
        #[+ImportantEntity__Code--YDID TypeScript]#[+Term--YDID 言語]は#[+Term__Contrast--YDID エラー]
        #[+ImportantEntity__Code--YDID TS2377]に就いて通知する。
      #[+ImportantEntity--YDID JavaScript]のみの話しなら、当#[+ImportantEntity--YDID ESLint]規則が無いと、此の間違いが発見出来るのは
        #[+SecondaryEntity--YDID IntelliJ IDEA]の様に一流の#[+Term--YDID 結合開発環境]ぐらい。


    //- ─── getter-return ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.codeValidity.$children["getter-return"].$heading,
      HTML_ID: localizedSectioning.codeValidity.$children["getter-return"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "規則の設定" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "getter-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+ImportantEntity__Code--YDID get]#[+Term--YDID 構文]と言う#[+ImportantEntity--YDID ECMAScript 5]規格に導入された機能
          はは#[+Term--YDID オブジェクト]の#[+Term__Contrast--YDID プロパティ]を#[+Term--YDID 関数]に結び付き、当#[+Term--YDID プロパティ]
          へのアクセスの際此の#[+Term--YDID 関数]が呼び出される。
        #[+Keyword--YDID 各]#[+Term--YDID ゲッター]が値を返す#[+Keyword--YDID 前提]。

      p.Article-Paragraph.
        The #[+ImportantEntity__Code--YDID get] #[+Term--YDID syntax] binds an #[+Term--YDID object]
          #[+Term__Contrast--YDID property] to a #[+Term--YDID function] that will be called when that
          #[+Term--YDID property] is looked up.
        It was first introduced in #[+ImportantEntity--YDID ECMAScript 5].
        Note that #[+Keyword--YDID every] #[+Term--YDID getter] is #[+Keyword--YDID expected] to return a value.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/getter-return"
        }) ESLintの正式的説明書

    p.Article-Paragraph.
      当規則の違反は#[+Term--YDID ゲッター]の#[+Keyword--YDID 概念]自体に逆らっているのだ。
      概念に依ると、ゲッターは事前算出の上か、其の算出無しか、値を返しているメンバーである。
      其れで、値を返さなない#[+Term--YDID ゲッター]のコードが意識的に書かれたとしたら、エンジニアはやっている事を理解していない様だ。

    p.Article-Paragraph.
      コードが#[+ImportantEntity--YDID TypeScript]で書かれた場合、#[+ImportantEntity--YDID TypeScript]の#[+Term--YDID 型確認]が
        #[+ImportantEntity--YDID TS2378]エラーに就いて通知し、#[+Term--YDID ゲッター]が何かを返さなければいけないとはっきり伝えられる。
      #[+ImportantEntity--YDID JavaScript]で書かれた場合、#[+SecondaryEntity--YDID IntelliJ IDEA](バージョン
       #[+ImportantEntity--YDID 2024.1.1]で確認)の様に一流の#[+Term--YDID 結合開発県境]でも当間違いを発見しない事が有る。


    //- ━━━ アルゴリズムエラー予防 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.algorithmicErrorsPreventing.$heading,
      HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      前の群と違って、当群の違反は完全に妥当なコードに成っている事が多いと共に、アルゴリズム的なエラーを含める可能性も高い。
      該当している規則にとって既に高品質な説明書が既に存在しているので、過半数の規則を和訳で済ませさてもらう。

    //- ─── for-direction ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.algorithmicErrorsPreventing.$children["for-direction"].$heading,
      HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["for-direction"].$anchor
    }).Article-Heading3

    +Blockquote--YDF

      p.Article-Paragraph.
        条件を満たす事が不可能（例えば正しくない方向へ変化しているカウンターの為）なら、
          #[+ImportantEntity__Code--YDID for]#[+Term--YDID ループ]が無限に成る。
        無限ループが意識的に作られる場合は有るが、其の時#[+ImportantEntity__Code--YDID while]ループが一般的に使われている。
        無限な#[+ImportantEntity__Code--YDID for]#[+Term--YDID ループ]なら、バグである可能性が高い。

      p.Article-Paragraph.
        A #[+ImportantEntity--YDID for] loop with a stop condition that can never be reached, such as one with a
          counter that moves in the wrong direction, will run infinitely.
        While there are occasions when an infinite loop is intended, the convention is to construct such loops as
          #[+ImportantEntity__Code--YDID while] loops.
        More typically, an infinite #[+ImportantEntity__Code--YDID for] loop is a bug.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/for-direction"
        }) ESLintの正式的説明書

    +CodeViewer--YDF({ title: "規則の設定" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "for-direction": "error" }


    //- ─── no-async-promise-executor ──────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.algorithmicErrorsPreventing.$children["no-async-promise-executor"].$heading,
      HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["no-async-promise-executor"].$anchor
    }).Article-Heading3

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID プロミス]の#[+Term__Contrast--YDID 執行者]（#[+Term--YDID promise executor]）と呼ぶ
          #[+Term__Contrast--YDID プロミス]の#[+Term--YDID 引数]は#[+Term--YDID 非同期関数]（明示的#[+Keyword--YDID 又は]暗黙的
          に#[+Term--YDID プロミス]のを返している#[+Term--YDID 関数]）に成っていても、妥当なコードだ。
        然し、下記の理由で、#[+Keyword--YDID 間違い]に成っている可能性が#[+Keyword--YDID 高い]。

      ul.Article-UnorderedList

        li.
          #[+Term__Contrast--YDID 執行者]の役割として、#[+Term--YDID 非同期関数]は#[+Term__Contrast--YDID エラー]を投げてると、
            此の#[+Term--YDID エラー]が#[+Keyword--YDID 失われ]、#[+Term--YDID エラー]処理可能な新規#[+Term--YDID プロミス]も作らない。
          デバッグが難しく成り、特定の#[+Term--YDID エラー]の処理関連問題も発生する事が有る。

        li.
          #[+Term--YDID プロミス]の#[+Term__Contrast--YDID 引数]は#[+ImportantEntity__Code--YDID await]#[+Term--YDID キーワード]
            を利用しているなら、#[+Term--YDID プロミス]の#[+Term__Contrast--YDID コンストラクタ]
            （#[+ImportantEntity__Code--YDID new Promise]）を利用する必要は無かったか、#[+Term--YDID プロミス]のネスティングを減らす事が
            出来る兆し。

      p.Article-Paragraph.
        The #[+Term--YDID executor function] can also be an #[+Term--YDID async function].
        However, this is #[+Keyword--YDID usually] a #[+Keyword__Contrast--YDID mistake], for a few reasons:

      ul.Article-UnorderedList

        li.
          If an #[+Keyword--YDID async] #[+Term--YDID executor function] throws an #[+Term__Contrast--YDID error], the
            #[+Term--YDID error] will be #[+Keyword--YDID lost] and #[+Keyword__Contrast--YDID won’t] cause the
            newly-constructed #[+ImportantEntity__Code--YDID Promise] to reject.
          This could make it difficult to debug and handle some #[+Term--YDID errors].

        li.
          If a #[+ImportantEntity__Code--YDID Promise] #[+Term--YDID executor function] is using
            #[+ImportantEntity__Code--YDID await], this is #[+Keyword--YDID usually] a sign that it
            is&nbsp;#[+Keyword--YDID not]&nbsp;actually necessary to use the #[+ImportantEntity__Code--YDID new Promise]
            #[+Term--YDID constructor], or the scope of the #[+ImportantEntity__Code--YDID new Promise]
            #[+Term--YDID constructor] can be reduced.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/no-async-promise-executor"
        }) ESLintの正式的説明書

    +CodeViewer--YDF({ title: "規則の設定" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "no-async-promise-executor": "error" }


    //- ━━━ 其の他の規則 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.other.$heading,
      HTML_ID: localizedSectioning.other.$anchor
    }).Article-Heading2

    //- ─── no-await-in-loop ───────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.other.$children["no-await-in-loop"].$heading,
      HTML_ID: localizedSectioning.other.$children["no-await-in-loop"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "規則の設定" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "no-await-in-loop": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        ループの際、反復される要素を処理する事は一般。
        然し、#[+Keyword--YDID 各]ステップ中#[+ImportantEntity__Code--YDID await]#[+Term--YDID キーボード]が使われるなら、
          #[+Term--YDID プロミス]に提供される平行処理の利点が使われていない訳。

      p.Article-Paragraph.
        普通は複数の#[+Term--YDID プロミス]を#[+Keyword--YDID 一括]に実行し、#[+ImportantEntity__Code--YDID Promise.all()]で結果に
          アクセスする様にコードをリファクタリング出来る。
        さもなくば、以前の反復が終わらない限り、新しいのは始まらない。

      p.Article-Paragraph.
        Performing an operation on each element of an iterable is a common task.
        However, performing an #[+ImportantEntity__Code--YDID await] as part of #[+Keyword--YDID each] operation is an
          indication that the program is not taking full advantage of the parallelization benefits of
          #[+ImportantEntity__Code--YDID async]/#[+ImportantEntity__Code--YDID await].

      p.Article-Paragraph.
        Usually, the code should be refactored to create all the #[+Term--YDID promises] at #[+Keyword--YDID once],
          then get access to the results using #[+ImportantEntity__Code--YDID Promise.all()].
        Otherwise, each successive operation will not&nbsp;start until the previous one has completed.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/no-await-in-loop"
        }) ESLintの正式的説明書

    p.Article-Paragraph.
      当規則は各#[+Term--YDID プロミス]内処理の間に#[+Keyphrase--YDID 依存性が全く無い]場合に#[+Keyword--YDID 限って]対象と成っている。
      然し、依存性が無いとは#[+Keyword--YDID 限らない]。
      例えば、#[+Term--YDID HTTPリクエスト]の処理の際、非同期の処理を実行している事が多い#[+Term--YDID ミドルウェア関数]が呼ばれ、
        #[+Keyword--YDID 各]#[+Term--YDID 関数]が以前の#[+Term--YDID 関数]の実行完了を#[+Keyword--YDID 待たなければいけない]。

    p.Article-Paragraph.
      尚且つ、多数の#[+Term--YDID プロミス]の同時実行は問題を起こす事も有る。
      例えば、各#[+Term--YDID プロミス]が#[+Term__Contrast--YDID HTTPリクエスト]を送信するとしたら、宛先のサーバが#[+Term--YDID DoS攻撃]
        と見做し、送信元の#[+Term--YDID IPアドレス]から其れ以降のリクエストを拒否する恐れが有る。
      予防するには、一括で送信するリクエスト数を減らすか、送信頻度を減らすか、其の両方の対策を取らざる得ない場合が有る。

    p.Article-Paragraph
      | とは言え、一般的に可能な時、#[+Term--YDID 平行処理]を使う事は推薦なので、当規則が対象外と判断した際、理由を明確に説明するコメントを残さなければ
      |   いけない。
      | 例えば、
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.yamatoDaiwaBackend.npm
      }) Yamato Daiwa Backend
      | フレームワークで、#[+Term--YDID ミドルウェア関数]の連続した呼び出しの際、下記のコメントが残された。

    +CodeViewer--YDF({ title: "正当利用が有る「no-await-in-loop」規則違反の例" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript }).

        for (const middleware of this.middlewares) {

          let middlewareCompletionSignal: Middleware.CompletionSignal;

          try {

            /* eslint-disable-next-line no-await-in-loop --
             * The middleware handlers must be executed sequentially.
             * ミドルウェア関数は一個ずつ順番通り実行されなければいけない。 */
            middlewareCompletionSignal = await middleware(normalizedRequest, response, this.configuration);

          } catch (error: unknown) {

            Logger.logError({
              errorType: "MiddlewareExecutionError",
              ...Server.localization.errors.middlewareExecutionFailed,
              occurrenceLocation: "Server.requestMasterHandler(compoundParameter)",
              caughtError: error
            });

            return response.submitWithError({ statusCode: ServerErrorsHTTP_StatusCodes.internalServerError });

          }


          if (middlewareCompletionSignal === Middleware.CompletionSignal.finishRequestHandling) {
            return;
          }

        }
