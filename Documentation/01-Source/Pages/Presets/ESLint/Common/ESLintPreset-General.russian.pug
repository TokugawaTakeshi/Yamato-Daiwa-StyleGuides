extends ../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("ESLint"),
        description: ""
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("presets.ESLint.general");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.presets.$children.ESLint.$children.general.$URI,
      japanese: routing.japanese.presets.$children.ESLint.$children.general.$URI
    });

    const {
      $sectioning: localizedSectioning,
      $heading: topHeading
    } = routing.russian.presets.$children.ESLint.$children.general;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ Общие для TypeScript и JavaScript правила ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1= topHeading

    +AdmonitionBlock--YDF({
      SVG_Icon: true,
      geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
      decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.guidance
    }) Перевод цитат выполнен с улучшением стилистики и добавлением уточнений, а потому не является дословным.


    //- ─── Валидность ECMAScript-кода ─────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.codeValidity.$heading,
      HTML_ID: localizedSectioning.codeValidity.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Стандарт #[+ImportantEntity--YDID ECMA-Script] является довольно либеральным, что позволяет писать бессмысленный
        код зачастую #[+Keyphrase--YDID без ошибок при его выполнении].
      Например, можно в #[+Term--YDID классе] объявить #[+Term--YDID геттер], который ничего
        не&nbsp;возвращает, что противоречит самой концепции #[+Term--YDID геттеров].
      Задача правил это группы — значительно уменьшить количество такого бессмысленного кода.


    //- ─── array-callback-return ──────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.codeValidity.$children["array-callback-return"].$heading,
      HTML_ID: localizedSectioning.codeValidity.$children["array-callback-return"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "array-callback-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID Объект] #[+ImportantEntity__Code--YDID Array] имеет несколько #[+Term--YDID методов] для
          фильтрации, поэлементного преобразования и сворачивания.
        Если мы не&nbsp;укажем #[+Term--YDID инструкцию возврата значения] в передаваемых через #[+Term--YDID параметр]
          #[+Term__Contrast--YDID функциях обратного вызова] при вызове этих #[+Term--YDID методов], то, возможно,
          это ошибка.
        Если вы не&nbsp;хотите возвращать значение или не&nbsp;нуждаетесь в возвращённом значении, то вместо этих
          #[+Term--YDID методов] Вам подойдёт #[+Term--YDID метод] #[+ImportantEntity__Code--YDID .forEach].

      p.Article-Paragraph.
        #[+ImportantEntity__Code--YDID Array] has several #[+Term--YDID methods] for filtering, mapping, and folding.
        If we forget to write return statement in a #[+Term--YDID callback] of those, it’s probably a mistake.
        If you don’t want to use a return or don’t need the returned results, consider using
          #[+ImportantEntity__Code--YDID .forEach] instead.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/array-callback-return"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      При использовании языка #[+ImportantEntity--YDID TypeScript] с настроенным оповещением об ошибках, подобного рода
        странности будут сразу же обнаружены, поскольку #[+Keyword--YDID все] #[+Keyword__Contrast--YDID стандартные]
        #[+Term--YDID методы] (в том числе и #[+Term--YDID массивов]) имеют #[+Keyword--YDID встроенные] качественные
        определения #[+Term--YDID TypeScript-типов].
      Поэтому #[+Keyphrase--YDID в случае использования #[+ImportantEntity--YDID TypeScript]] это правило —
        перестраховочное.


    //- ─── constructor-super ──────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.codeValidity.$children["constructor-super"].$heading,
      HTML_ID: localizedSectioning.codeValidity.$children["constructor-super"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "constructor-super": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID Конструкторы] #[+Keyword--YDID унаследованных] #[+Term--YDID классов] #[+Keyword--YDID должны]
          вызывать #[+ImportantEntity__Code--YDID super()].
        #[+Term--YDID Конструкторы] #[+Term__Contrast--YDID классов], которые #[+Keyword--YDID не]&nbsp;унаследованы,
          #[+ImportantEntity__Code--YDID super()] вызывать #[+Keyword--YDID не]&nbsp;должны.
        При нарушении этих правил произойдёт #[+Term--YDID ошибка] выполнения #[+Term--YDID JavaScript-кода].

      p.Article-Paragraph.
        #[+Term--YDID Constructors] of #[+Keyword--YDID derived] #[+Term--YDID classes] #[+Keyword--YDID must] call
          #[+ImportantEntity__Code--YDID super()].
        Constructors of #[+Keyword--YDID non] derived #[+Term--YDID classes] must&nbsp;#[+Keyword--YDID not]&nbsp;call
          #[+ImportantEntity__Code--YDID super()].
        If this is not observed, the #[+ImportantEntity--YDID JavaScript] engine will raise a runtime error.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/constructor-super"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      Если в #[+Term--YDID конструкторе] #[+Keyword--YDID унаследованного] #[+Term--YDID класса] обратиться к
        #[+Term--YDID контекстной переменной] #[+ImportantEntity__Code--YDID this] до вызова
        #[+ImportantEntity__Code--YDID super()], то проекта #[+ImportantEntity__Code--YDID TypeScript]-типов оповестит об
        #[+Term--YDID ошибке] #[+ImportantEntity__Code--YDID TS2377].
      Что касается #[+ImportantEntity--YDID JavaScript], то без данного #[+ImportantEntity--YDID ESLint]-правила
        это ошибку способны заметить лишь лучшие #[+Term--YDID интегрированные среды разработки] такие как
        #[+SecondaryEntity--YDID IntelliJ IDEA].


    //- ─── getter-return ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.codeValidity.$children["getter-return"].$heading,
      HTML_ID: localizedSectioning.codeValidity.$children["getter-return"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "getter-return": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID Синтаксис] #[+ImportantEntity__Code--YDID get], доступный со стандарта
          #[+ImportantEntity--YDID ECMAScript 5], привязывает #[+Term--YDID свойство] #[+Term__Contrast--YDID объекта] к
          #[+Term--YDID функции], которая будет вызвана при обращении к этому #[+Term--YDID свойству].
        Предполагается, что #[+Keyword--YDID каждый] #[+Term--YDID геттер] #[+Keyword__Contrast--YDID должен]
          вернуть значение.

      p.Article-Paragraph.
        The #[+ImportantEntity__Code--YDID get] #[+Term--YDID syntax] binds an #[+Term--YDID object]
          #[+Term__Contrast--YDID property] to a #[+Term--YDID function] that will be called when that
          #[+Term--YDID property] is looked up.
        It was first introduced in #[+ImportantEntity--YDID ECMAScript 5].
        Note that #[+Keyword--YDID every] #[+Term--YDID getter] is #[+Keyword--YDID expected] to return a value.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/getter-return"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      Нарушение данного правило противоречит самой #[+Keyword--YDID концепции] #[+Term--YDID геттеров], согласно которой
        #[+Term--YDID геттеры] задуманы как #[+Term--YDID члены], возвращающие определённые значения (с вычислениями или
        без).
      Если код #[+Keyphrase--YDID ничего не&nbsp;возвращающего] геттера написан сознательно, значит программист
        не&nbsp;понимает своих действий.

    p.Article-Paragraph.
      Если с использованием #[+ImportantEntity--YDID TypeScript] в #[+Term--YDID классе] или #[+Term--YDID объекте]
        создать #[+Term--YDID геттер], который ничего не&nbsp;возвращает, то проверщик #[+Term--YDID TypeScript-типов]
        оповестит об ошибке #[+ImportantEntity--YDID TS2378], где будет чётко сказано, что #[+Term--YDID геттер]
        должен что-то возвращать.
      Если же код написан на #[+ImportantEntity--YDID JavaScript], то даже такие передовые интегрированные среды
        разработки, как #[+ImportantEntity--YDID IntelliJ IDEA] ни о чём не оповестят (проверено на версии
        #[+SecondaryEntity--YDID 2024.1.1]).

    //- TODO Ожидает документирования ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    //-
      //- ─── no-class-assign ────────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.codeValidity.$children["no-class-assign"].$heading,
        HTML_ID: localizedSectioning.codeValidity.$children["no-class-assign"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-class-assign": "error" }


      //- ─── no-const-assign ────────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.codeValidity.$children["no-const-assign"].$heading,
        HTML_ID: localizedSectioning.codeValidity.$children["no-const-assign"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-const-assign": "error" }


      //- ─── no-constructor-return ──────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.codeValidity.$children["no-constructor-return"].$heading,
        HTML_ID: localizedSectioning.codeValidity.$children["no-constructor-return"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-constructor-return": "error" }


    //- ─── Предотвращение алгоритмических ошибок ──────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.algorithmicErrorsPreventing.$heading,
      HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      В отличие от предыдущей группы правил, нарушения данной группы хотя и могут представлять собой валидный код,
        но с высокой вероятностью являться алгоритмической ошибкой.
      Соответствующие правила также достаточно хорошо прокомментированы официальной документацией, потому для многих
        из них мы ограничимся переводом с улучшением стилистики.

    //- ─── for-direction ──────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.algorithmicErrorsPreventing.$children["for-direction"].$heading,
      HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["for-direction"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "for-direction": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        Цикл #[+ImportantEntity__Code--YDID «for»] с условием, которое никогда не&nbsp;будет выполнено (например
          из-за меняющегося в неверном направлении счётчика), будет повторяться бесконечно.
        Хотя бывают случаи, когда бесконечный цикл создаётся намеренно, для таких случаев принято использовать
          цикл #[+ImportantEntity__Code--YDID «while»].
        Если же цикл #[+ImportantEntity__Code--YDID «for»] является бесконечным, то, скорее всего, это ошибка.

      p.Article-Paragraph.
        A #[+ImportantEntity--YDID for] loop with a stop condition that can never be reached, such as one with a
          counter that moves in the wrong direction, will run infinitely.
        While there are occasions when an infinite loop is intended, the convention is to construct such loops as
          #[+ImportantEntity__Code--YDID while] loops.
        More typically, an infinite #[+ImportantEntity__Code--YDID for] loop is a bug.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/for-direction"
        }).Article-Link Официальная документация ESLint


    //- ─── no-async-promise-executor ──────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.algorithmicErrorsPreventing.$children["no-async-promise-executor"].$heading,
      HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["no-async-promise-executor"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "no-async-promise-executor": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        #[+Term--YDID Параметр] #[+Term__Contrast--YDID промиса], называемый #[+Term--YDID «исполнителем»], может быть
          #[+Term--YDID асинхронной функцией] (#[+Term--YDID функцией], явно #[+Keyword--YDID или] неявно возвращающей
          #[+Term--YDID промис]).
        Однако, #[+Keyphrase--YDID скорее всего] это #[+Term--YDID ошибка] — по следующим причинам:

      ul.Article-UnorderedList

        li.
          Если #[+Keyword--YDID асинхронная] #[+Term--YDID функция]
            #[+Keyphrase--YDID в роли #[+Term--YDID исполнителя]] бросает #[+Term--YDID ошибку], эта
            #[+Term--YDID ошибка] будет #[+Keyword--YDID потеряна] и #[+Keyword__Contrast--YDID не]&nbsp;создаст
            нового #[+Term--YDID промиса], в котором #[+Term__Contrast--YDID ошибка] может быть перехвачена.
          Это может создать трудности с отладкой и обработкой некоторых #[+Term--YDID ошибок].

        li.
          Если #[+Term--YDID параметр] #[+Term__Contrast--YDID промиса] использует #[+Term--YDID ключевое слово]
            #[+ImportantEntity__Code--YDID await], то обычно это означает, что использовать #[+Term--YDID конструктор]
            #[+ImportantEntity__Code--YDID new Promise] незачем или можно уменьшить вложенность #[+Term--YDID промисов].

      p.Article-Paragraph.
        The #[+Term--YDID executor function] can also be an #[+Term--YDID async function].
        However, this is #[+Keyword--YDID usually] a #[+Keyword__Contrast--YDID mistake], for a few reasons:

      ul.Article-UnorderedList

        li.
          If an #[+Keyword--YDID async] #[+Term--YDID executor function] throws an #[+Term__Contrast--YDID error], the
            #[+Term--YDID error] will be #[+Keyword--YDID lost] and #[+Keyword__Contrast--YDID won’t] cause the
            newly-constructed #[+ImportantEntity__Code--YDID Promise] to reject.
          This could make it difficult to debug and handle some #[+Term--YDID errors].

        li.
          If a #[+ImportantEntity__Code--YDID Promise] #[+Term--YDID executor function] is using
            #[+ImportantEntity__Code--YDID await], this is #[+Keyword--YDID usually] a sign that it
            is&nbsp;#[+Keyword--YDID not]&nbsp;actually necessary to use the #[+ImportantEntity__Code--YDID new Promise]
            #[+Term--YDID constructor], or the scope of the #[+ImportantEntity__Code--YDID new Promise]
            #[+Term--YDID constructor] can be reduced.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/no-async-promise-executor"
        }).Article-Link Официальная документация ESLint


    //- TODO Ожидает документирования ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    //-
      //- ─── no-compare-neg-zero ────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.algorithmicErrorsPreventing.$children["no-compare-neg-zero"].$heading,
        HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["no-compare-neg-zero"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-compare-neg-zero": "error" }


      //- ─── no-cond-assign ─────────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.algorithmicErrorsPreventing.$children["no-cond-assign"].$heading,
        HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["no-cond-assign"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-cond-assign": "error" }


      //- ─── no-constant-condition ──────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.algorithmicErrorsPreventing.$children["no-constant-condition"].$heading,
        HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["no-constant-condition"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-constant-condition": "error" }


      //- ─── no-control-regex ───────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.algorithmicErrorsPreventing.$children["no-control-regex"].$heading,
        HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["no-control-regex"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-control-regex": "error" }


      //- ─── no-dupe-args ───────────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.algorithmicErrorsPreventing.$children["no-dupe-args"].$heading,
        HTML_ID: localizedSectioning.algorithmicErrorsPreventing.$children["no-dupe-args"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-dupe-args": "error" }


    //- TODO Ожидает документирования ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    //-
      //- ─── Предотвращение запутывания и глупых ошибок ─────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 2,
        text: localizedSectioning.preventionOfConfusingAndStupidMistakes.$heading,
        HTML_ID: localizedSectioning.preventionOfConfusingAndStupidMistakes.$anchor
      }).Article-Heading2

      //- ─── no-constant-binary-expression ──────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.other.$children["no-constant-binary-expression"].$heading,
        HTML_ID: localizedSectioning.other.$children["no-constant-binary-expression"].$anchor
      }).Article-Heading3

      +CodeViewer--YDF({ title: "Конфигурация правила" })
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "no-constant-binary-expression": "error" }

    //-
      //- ─── Не должно быть в чистовом коде ─────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 2,
        text: localizedSectioning.mustNotBeInProductionCode.$children.other.$heading,
        HTML_ID: localizedSectioning.mustNotBeInProductionCode.$children.other.$anchor
      }).Article-Heading2

      //- ─── no-debugger ────────────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.mustNotBeInProductionCode.$children.other.$children["no-debugger"].$heading,
        HTML_ID: localizedSectioning.mustNotBeInProductionCode.$children.other.$children["no-debugger"].$anchor
      }).Article-Heading3


    //- ─── Другие правила ─────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.other.$heading,
      HTML_ID: localizedSectioning.other.$anchor
    }).Article-Heading2

    //- ─── no-await-in-loop ───────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: localizedSectioning.other.$children["no-await-in-loop"].$heading,
      HTML_ID: localizedSectioning.other.$children["no-await-in-loop"].$anchor
    }).Article-Heading3

    +CodeViewer--YDF({ title: "Конфигурация правила" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
        { "no-await-in-loop": "error" }

    +Blockquote--YDF

      p.Article-Paragraph.
        Выполнение каких-либо преобразований с итерируемым элементом на каждом шаге цикла является стандартным сценарием.
        Однако, если на #[+Keyword--YDID каждом] шаге цикла используется #[+Term--YDID ключевое слово]
          #[+ImportantEntity__Code--YDID await], то преимущества #[+Term--YDID параллелизма], которые дают
          #[+Term--YDID промисы], не&nbsp;используются.

      p.Article-Paragraph.
        Обычно, код может быть отрефакторен таким образом, чтобы начать выполнение #[+Keyword--YDID всех]
          #[+Term--YDID промисов] #[+Keyword--YDID разом], а доступ к результатам получить через
          #[+ImportantEntity__Code--YDID Promise.all()].
        В противном случае, новый шаг цикла не&nbsp;начнётся, пока текущий не&nbsp;завершиться.

      p.Article-Paragraph.
        Performing an operation on each element of an iterable is a common task.
        However, performing an #[+ImportantEntity__Code--YDID await] as part of #[+Keyword--YDID each] operation is an
          indication that the program is not taking full advantage of the parallelization benefits of
          #[+ImportantEntity__Code--YDID async]/#[+ImportantEntity__Code--YDID await].

      p.Article-Paragraph.
        Usually, the code should be refactored to create all the #[+Term--YDID promises] at #[+Keyword--YDID once],
          then get access to the results using #[+ImportantEntity__Code--YDID Promise.all()].
        Otherwise, each successive operation will not&nbsp;start until the previous one has completed.

      +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
        +Link--YDF({
          unendorsedExternalURI: "https://eslint.org/docs/latest/rules/no-await-in-loop"
        }).Article-Link Официальная документация ESLint

    p.Article-Paragraph.
      Данное правило применимо #[+Keyphrase--YDID тогда и только тогда], когда процедуры, которые выполняются в
        #[+Term--YDID промисах], #[+Keyphrase--YDID независимы друг от друга].
      Однако это #[+Keyphrase--YDID далеко #[+Keyword--YDID не]&nbsp;всегда] так.
      Например, при вызове #[+Term--YDID функций-посредников], обрабатывающих #[+Term--YDID HTTP-запрос],
        которые зачастую выполняют асинхронные операции, #[+Keyword--YDID каждый] #[+Keyword__Contrast--YDID следующий]
        #[+Term--YDID посредник] #[+Keyword--YDID должен] дождаться, пока #[+Keyword--YDID предыдущий]
        отработает и передаст управление.

    p.Article-Paragraph.
      Кроме того, иногда выполнение большого количества #[+Term--YDID промисов] #[+Keyword--YDID разом] может вызывать
        проблемы.
      Например, если каждый #[+Term--YDID промис] отправляет #[+Term--YDID HTTP-запрос], то сервер, на который эти
        запросы отправляются, может расценить такую массовую отправку запросов с одного #[+Term--YDID IP-адреса] как
        #[+Term--YDID DoS-атаку] и отказать в дальнейшей обработке запросов.
      Чтобы этого избежать, придётся либо отправлять меньше запросов за раз, либо отправлять запросы с большей
        периодичностью, либо и то и другое.

    p.Article-Paragraph
      | Тем не&nbsp;менее, поскольку #[+Keyphrase--YDID по возможности] следует использовать #[+Term--YDID параллелизм],
      |   как и рекомендовано официальной документацией, то нарушая данное правило, #[+Keyword--YDID необходимо]
      |   добавить комментарий, явно указывающий, почему #[+Term--YDID промисы] должны выполняться последовательно.
      | Вот, например, какой комментарий был добавлен во фреймворке
      |
      +Link--YDF({
        unendorsedExternalURI: sharedExternalLinks.yamatoDaiwaBackend.npm
      }).Article-Link Yamato Daiwa Backend
      |
      | при последовательном вызове #[+Term--YDID функций-посредников]:

    +CodeViewer--YDF({ title: "Пример обоснованного невыполнения правила \"no-await-in-loop\"" })
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript }).

        for (const middleware of this.middlewares) {

          let middlewareCompletionSignal: Middleware.CompletionSignal;

          try {

            /* eslint-disable-next-line no-await-in-loop --
             * The middleware handlers must be executed sequentially.
             * Посредники должны быть выполнены последовательно. */
            middlewareCompletionSignal = await middleware(normalizedRequest, response, this.configuration);

          } catch (error: unknown) {

            Logger.logError({
              errorType: "MiddlewareExecutionError",
              ...Server.localization.errors.middlewareExecutionFailed,
              occurrenceLocation: "Server.requestMasterHandler(compoundParameter)",
              caughtError: error
            });

            return response.submitWithError({ statusCode: ServerErrorsHTTP_StatusCodes.internalServerError });

          }


          if (middlewareCompletionSignal === Middleware.CompletionSignal.finishRequestHandling) {
            return;
          }

        }

    //-
      //- ━━━ Правила для TypeScript ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      +Heading--YDF({
        level: 2,
        text: localizedSectioning.typeScriptRules.$heading,
        HTML_ID: localizedSectioning.typeScriptRules.$anchor
      }).Article-Heading2

      //- ─── Безопасность типизации ─────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 2,
        text: localizedSectioning.typeScriptRules.$children.typeSafety.$heading,
        HTML_ID: localizedSectioning.typeScriptRules.$children.typeSafety.$anchor
      }).Article-Heading2

      //- ─── @typescript-eslint/consistent-type-assertions ──────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 3,
        text: localizedSectioning.typeScriptRules.$children.typeSafety.$children["consistent-type-assertions"].$heading,
        HTML_ID: localizedSectioning.typeScriptRules.$children.typeSafety.$children["consistent-type-assertions"].$anchor
      }).Article-Heading3

      +Blockquote--YDF

        p.Article-Paragraph.
          This rule aims to standardize the use of type assertion style across the codebase.
          Keeping to one syntax consistently helps with code readability.

        p.Article-Paragraph.
          (Примечание) Хотя это об этом сводке и не написано, данное правило может и полностью запретить использование
            данной функциональности.

        +InformationSourceReference--YDF.Blockquote--YDF-ReferenceToSource
          +Link--YDF({
            unendorsedExternalURI: "https://typescript-eslint.io/rules/consistent-type-assertions/"
          }).Article-Link Официальная документация typescript-eslint

      p.Article-Paragraph.
        В идеале, кастинг использоваться не должен вообще, однако реальность такова, что иногда альтернатив особо и нет.
        Тем не менее, если кастинг разрешить, то сразу же начнётся злоупотребление этой функциональностью.
        Поэтому, наш пресет запрещает использование данной функциональности, а если по какой-то причине использовать
          данную функциональность необходимо, то программист обязан это прокомментировать.

      +CodeViewer--YDF
        +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.JSON }).
          { "@typescript-eslint/consistent-type-assertions": [ "error", { "assertionStyle": "never" } ] }
