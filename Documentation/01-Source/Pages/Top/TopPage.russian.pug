extends ../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/Minimal/MinimalLayout.pug


block append Requirements

  include ../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("ESLint"),
        description:
            "npm-пакет \"Yamato Daiwa Styles Guides\" предлагает пресет ESlint, отличающийся строгостью и не прощающим " +
              "лени и непонимания своих действий, а потому подходящий для высококачественной разработки."
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/Minimal/MinimalLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents",
        "@Pages/Top/TopPage"
      ]
    });

    RoutingEmulator.setCurrentRoute("top");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.top.$URI,
      japanese: routing.japanese.top.$URI
    });

    const localizedSectioning = localizedRouting.top.$sectioning;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  main.TopPage

    .TopPage-ImageAndTopHeadingGroup

      img.TopPage-ImageAndTopHeadingGroup-Image(
        src="@Shared/Icons/YDSG_Icon.svg"
        alt="Иконка «Yamato Daiwa Styles Guides»"
      )

      h1.TopPage-ImageAndTopHeadingGroup-Heading
        span.TopPage-ImageAndTopHeadingGroup-Heading-FirstLine Yamato Daiwa
        span.TopPage-ImageAndTopHeadingGroup-Heading-SecondLine Style Guides

    p.TopPage-ShortDescription-Heading.
      Крайне строгие пресеты ESLint и pug-lint для высококачественной разработки

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Top/Images/MainVisual",
      imageAlternateText: "",
      autoAspectRatioByYDA: true,
      geometry: SingleImageViewer__YDF.GeometricVariations.minimalistic,
      decoration: SingleImageViewer__YDF.DecorativeVariations.minimalistic
    })

    +CompactTableOfContents--YDF_DK(localizedRouting).TopPage-TableOfContents

    article

      //- ━━━ Особенности пресетов ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      +Heading--YDF({
        level: 2,
        text: localizedSectioning.presetsFeatures.$heading,
        HTML_ID: localizedSectioning.presetsFeatures.$anchor
      }).Article-Heading2

      p.Article-Paragraph.
        Пресеты отличается строгостью, не прощает лени и завершения на спешно набросанном черновом коде.
        Например, пресет для #[+ImportantEntity--YDID ESLint] для #[+ImportantEntity--YDID TypeScript] требует
          #[+Term--YDID аннотации типов] в #[+ImportantEntity--YDID 100%] случаев, а
          использование #[+Term--YDID ключевого слова] #[+ImportantEntity__Code--YDID as] не&nbsp;допускается
          (разумеется, регламент для случаев, когда #[+Term--YDID приведение типов] неизбежно, имеется).


      //- ━━━ Психологическая справка ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      h2.Article-Heading2= localizedSectioning.psychologicalReference.$heading

      p.Article-Paragraph.
        Перед тем, как начать тратить бесценное время на #[+Keyword--YDID бесполезные] споры типа «нужно ли аннотировать
          #[+Term--YDID TypeScript-типы] во всех случаях без исключений?» или «можно ли иногда использовать
          #[+Term--YDID тип] #[+SecondaryEntity__Code--YDID any]?», следует разъяснить некоторые
          #[+Keyword--YDID психологические] моменты,
          #[+Keyphrase--YDID которые #[+Keyword--YDID обычно] игнорируются даже опытными инженерами].

      h3.Article-Heading3 Фокус на сиюминутной выгоде

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error,
      }).
        Из сиюминутной меньшей выгоды и большей выгоды в будущем человеческая психика склонна выбирать
          #[+Keyword--YDID первое].

      p.Article-Paragraph.
        В программировании разработчики часто предпочитают на скорою руку написать небережный код и тем самым
          побыстрее отделаться от работы в надежде на «авось, не&nbsp;я в будущем буду править этот код» или «авось,
          потом как-нибудь отрефакторим».
        Казалось бы, излишне говорить, что такой подход неприемлем (особенно для сегмента рынка
          «высокая качество — высокое цена»), но ввиду психологии описанное выше явление имеет
          #[+Keyword--YDID массовый] характер, а потому подробный комментарий требуется несмотря на
          #[+Keyword--YDID кажущуюся] банальность.

      p.Article-Paragraph.
        #[+Keyphrase--YDID В коммерческом программировании] ири создании #[+Keyword--YDID любых] программных продуктов,
          будет то сайт, нативное приложение или игра, #[+Keyword--YDID нет] места принципу «сделал и забыл».
        Начинающие программисты и менеджеры часто #[+Keyword--YDID ошибочно] воспринимают первый релиз продукта как
          «конец, после которого можно расслабиться и получать прибыль», даже не&nbsp;подозревая, что это на самом деле
          это только #[+Keyword--YDID начало], а разработка первой версии была лишь #[+Keyword--YDID прелюдией].
        Как только программный продукт становится доступен целевой аудитории, сразу же начинают поступать многочисленные
          запросы о добавлении новой функциональности и изменении уже существующей, а также обнаруживаются ошибки и
          изъяны, не&nbsp;замеченные в процессе тестирования.
        Если команда разработки в сотрудничестве с командой техподдержки не&nbsp;будет быстро реагировать
          на обратную связь от клиентов, клиенты будут разочарованы и быстро потеряны.
        Однако если качество кода низкое, то стоимость добавления нового кода и изменения уже существующего начнёт
          #[+Keyword--YDID резко] расти #[+Keyphrase--YDID пока не&nbsp;поглотит всю прибыль], в результате чего продукт
          станет убыточным.

      p.Article-Paragraph.
        Что касается рефакторинга, то в его отношении существует один интересный парадокс, о котором если бы знали,
          то не&nbsp;имели бы отношении него завышенных ожиданий.

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error,
      }) Чем ниже качество начального кода, тем меньше он поддаётся рефакторингу.

      p.Article-Paragraph.
        Таким образом, #[+Keyphrase--YDID от рефакторинга ожидают именного того, для чего он не&nbsp;походит] —
          значительного улучшения низкокачественного кода.
        Причин тому несколько:

      ul.Article-UnorderedList

        li.
          Чтобы выполнить рефакторнг кода, нужно его хорошо знать.
          А если поддерживает код не&nbsp;тот, кто его писал (зачастую это именно так), то разобраться в некачественном
            коде #[+Keyword--YDID крайне] #[+Keyword__Contrast--YDID трудно] — потребуется много времени
            (без консультаций с авторами кода и затраты времени и сил будут и вовсе огромными).
          Но даже если поддерживает низкокачественный код будет его автор, то и ему будет крайне разобраться в своём же
            коде, если он некоторое время не&nbsp;будет с ним контактировать.

        li.
          На этапе разработке начальной версии программного продукта менеджеры, составляющие график работ,
            #[+Keyword--YDID ошибочно] полагают, что после релиза первой версии у них будет достаточно времени на
            рефакторинг.
          К тому же, они недооценивают затраты времени, которое нужно на рефакторнг некачественного кода.

        li.
          Часто рефакторинг делается выборочно из-за опасений вызывать новые баги.
          Ввиду того, что в некачественном коде трудно (а иногда и невозможно в отведённое время) разобраться,
            такие опасения вполне оправданы, а рефакторинг вопреки этим опасениям действительно часто приводит к багам.

      p.Article-Paragraph.
        В общем, плата за выбор сиюминутной выгоды может оказаться запредельно высокой вплоть до коммерческого провала
          программного продукта, утраты клиентской базы, банкротства и потерей рабочих мест.
        Чтобы этого избежать, менеджеры и ведущие инженеры должны не&nbsp;только сформировать привычку ориентироваться
          на будущую выгоду, но и #[+Keyword--YDID принуждать] к этому всю команду.


      h3.Article-Heading3 Особенности начинающих программистов

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      }).
        Начинающие программисты часто просто #[+Keyword--YDID не]&nbsp;думают о том, что другие программисты будут
          читать и, возможно, править их код.

      p.Article-Paragraph.
        Начинающие программисты сфокусированы лишь на том, чтобы код хоть как-то работал, при этом совершенно
          #[+Keyword--YDID не]&nbsp;думают о будущем этого кода.
        Дело здесь #[+Keyword--YDID не]&nbsp;только в описанной выше склонности к выбору сиюминутной выгоды, но и в том,
          что #[+Term--YDID сознание] начинающего программиста #[+Keyword--YDID перегружено], потому в нём уже
          #[+Keyword--YDID не]&nbsp;остаётся места для заботы о поддерживаемости кода.
        Повторять код за учителем из видеоурока достаточно просто, но когда программист пытается написать что-то своё,
          #[+Keyphrase--YDID происходит кардинально перестроение мышления], где большие умственные усилия поначалу
          #[+Keyword--YDID неизбежны].


      h3.Article-Heading3 Особенности опытных программистов

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      }).
        По мере увеличения опыта, для программистов многие вещи становятся очевидным.
        В результате, они стараются убрать из кода всё то, что #[+Keyphrase--YDID с их точки зрения] очевидно,
          «чтобы было чище», что повышает требования к новым участникам, которые будут поддерживать код, а значит и
           стоимость вовлечения нового программиста в команду.

      p.Article-Paragraph.
        Именно этот феномен обычно игнорируют, когда говорят, что «не&nbsp;нужно аннотировать все типы в
          #[+ImportantEntity__Code--YDID TypeScript], потому что зачастую они и так очевидны, а потому только засоряют
          код» или «в #[+ImportantEntity--YDID C#] следует отдавать предпочтение ключевому слову
          #[+ImportantEntity__Code--YDID var], а ключевое слово #[+ImportantEntity__Code--YDID this] или имя
          #[+Term--YDID класса] при обращении к статическим членам класса использовать незачем».
        Опытным программистам, разумеется, всё очевидно, но:

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      }).
        Для того, чтобы минимизировать затраты на поддержку кода, он должен быть очевиден для программистов
          со средним и малым опытом.


      h2.Article-Heading3 Организационные моменты
      h3.Article-Heading4 Ревью кода опытными инженерами обязательно

      +AdmonitionBlock--YDF({
        title: "Кратко",
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      })
        ul.Article-UnorderedList

          li.
            #[+Term--YDID Линтеры] #[+Keyword--YDID не]&nbsp;являются средством автоматизации ревью кода.

          li.
            Ревью кода #[+Keyword--YDID опытным] инженером #[+Keyword__Contrast--YDID обязательно]
              #[+Keyphrase--YDID вне зависимости от того, используются #[+Term--YDID линтеры] или нет].

      p.Article-Paragraph.
        Хотя #[+Term--YDID линтеры] часто называют «инструментами контроля качества кода», этот контроль качества
          #[+Keyword--YDID крайне] #[+Keyword__Contrast--YDID ограничен].
        Например с помощью #[+Term--YDID линтера] #[+Keyword--YDID нельзя] выявить непонятные имена
          #[+Term--YDID переменных] и #[+Term--YDID функций], запутанную структуру кода, плохое распределение
          ответственности между #[+Term--YDID классами] и #[+Term--YDID функциями], а именно такие
          #[+Keyword--YDID не]&nbsp;поддающиеся измерению показатели во многом характеризуют качество кода.
        Поэтому, #[+Term--YDID линтеры] #[+Keyword--YDID нельзя] воспринимать как средство автоматизации контроля
          качества, которое заменит ревью исходного кода опытным инженером.

      p.Article-Paragraph.
        Линтеры следует воспринимать скорее как средство #[+Keyword--YDID предварительной] проверки кода, чтобы
          опытный инженер во время ревью занимался выявлением #[+Keyword--YDID только] таких проблем, которые невозможно
          выявить в автоматическом режиме (примеры приведены выше).


      h4.Article-Heading4 Установил линтер — следи за соблюдением правил

      +AdmonitionBlock--YDF({
        title: "Кратко",
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      }).
        #[+Term--YDID Pull request]/#[+Term--YDID merge request], включающий в себя выявленные линтерами нарушения,
          не&nbsp;подлежат ревью и тем более одобрению.

      p.Article-Paragraph.
        Ввести правила — относительно легко, а вот обеспечить контроль за их соблюдением — это то, чего обычно
          не&nbsp;делают или делают плохо (как на уровне небольших организаций, так и государств).
        Тоже и с использованием #[+Term--YDID линтеров]: нам неоднократно приходилось наблюдать во времена работы по
          аутсорсингу до основания своей компании, как #[+ImportantEntity--YDID ESLint] и аналогичные инструменты вроде
          бы и используются, но при этом если запустить линтинг, то ошибки и предупреждения исчисляются десятками
          (а иногда и сотнями).
        Когда всё запущено до такой степени, то свои нарушения теряются среди чужих, а потому использование
          #[+Term--YDID линтеров] теряет смысл.

      p.Article-Paragraph.
        Правило такое: если есть #[+Keyphrase--YDID хотя бы одно] нарушение правил #[+Term--YDID линтинга], то
          #[+Term--YDID pull request] (или, в зависимости от сервиса — #[+Term--YDID merge request])
          #[+Keyword--YDID немедленно] отклоняется и инженер обязан эти ошибки устранить, прежде чем
          #[+Term--YDID pull request] посмотрит человек.
        На многих сервисах включая #[+SecondaryEntity--YDID GitHub] можно настроить автоматический запуск
        #[+ImportantEntity--YDID ESLint] и других #[+Term--YDID линтеров] при создании #[+Term--YDID pull request-а],
          соответственно если опытный инженер видит, что имеются какие-либо нарушения, то он ревью
          #[+Keyword--YDID не]&nbsp;начинает.
        Через некоторое время другие члены команды усвоят это правило, потому не будут пытаться создавать
          #[+Term--YDID pull request]-ы с ошибками и предупреждениями #[+Term--YDID линтинга].

      p.Article-Paragraph.
        Очень часто команды прикрываются отсутствием времени для столь строгого соблюдения правил.
        Хотя чаще всего причина нехватки временен в плохом менеджменте, если Вы действительно не&nbsp;можете найти
          время на строгий контроль качества, значит сегмент рынка «высокая цена — максимальное качество» не&nbsp;Ваш,
          следовательно пресеты, опубликованные на этом сайте Вам не&nbsp;подходят.



        p.Article-Paragraph.
          Скажу начистоту: я ни с кем не&nbsp;советовался по поводу опубликованных здесь рекомендаций и ничьего мнения
            не спрашивал (за исключением редких случаев).
          Более того, я прекрасно знаю, что во многих моментах, например как следует именовать директории или стоит ли
            во всех случаях аннотировать #[+Term--YDID типы] в #[+ImportantEntity--YDID TypeScript], я расхожусь с
            общепринятыми взглядами и даже с официальными гайдлайнами Microsoft и Google.

        p.Article-Paragraph.
          Но я вижу, что происходит на IT рынке: значительная часть проектов проваливается, а #[+Keyword--YDID крайне]
            #[+Keyword__Contrast--YDID низкое] качество как кода, так и разрабатываемых программных продуктов в целом
            несмотря на высокие цены — в порядке вещей.
          Чтобы получить качественно другой результат, я считаю необходимостью взглянуть #[+Keyword--YDID критически] на
            устоявшиеся нормы написания кода и что-то изменить.

        p.Article-Paragraph.
          Но что стоит за созданными мной гайдлайнами?

        ul.Article-UnorderedList

          li.
            Я пишу логику сайтов и веб-приложения (как клиентскую, так и серверную часть) с 2016 года, когда стандарт
              ES6 уже появился, но ES5 ещё был актуален.
            В результате, по помимо разработки на заказ, я написал ....

          li.
            C этого же года я работаю с NodeJS как со средством автоматизации.
            Yamato Daiwa Automation — лучше, что я создал на основе накопленного опыта.

          li.
            Я изучал каждое правило ESLint и следил за его обновлениями с 2019 года.
            Приведённые ниже гайдлайны появились в это время, но изменялись мало ввиду того, что показали хороший результат.
            Всё это длится и со сей день.

        p.Article-Paragraph.
          Многие слышали про цикл PDCA, но мало кто использует его на практике.
          При создании этих гайдлайнов процесс PDCA используется в полной мере: обновлённые правила тут же вводятся во
            все проекты, и если они действительно оказываются полезными, то остаются в пресете.

        p.Article-Paragraph.
          Качественный код — вот доказательство того, что мы идём в правильном направлении.
          Если Вы хотите самостоятельно оценить читабельность кода, то можете посмотреть исходный код библиотек
            и фреймворков на GitHub.
          #[+Keyphrase--YDID Все они используют те пресеты, которые опубликованы на этом сайте].

        //- TODO


        p.Article-Paragraph.
          И хотя качество - понятие размытое, на этом показателе основываются такие более понятные как:

        ol.Article-OrderedList

          li Срок жизни приложения
          li Стоимость и время добавления нового функционала
          li Суммарное колиество багов на страницу сайта/приложения
          li Среднее время на поиск причины бага
          li Среднее время на исправление бага
          li Стоимость и время вовлечения нового инженера в проект


        h3.Article-Heading3 Субъективизм

        p.Article-Paragraph.
          Часть правил нацелены на соблюдение валидности кода, а потому необходимость в их соблюдении в обосновании и
            не&nbsp;нуждается.
          Однако языки, к котом имеют отношение описанные здесь гайдлайны, дают достаточно много свободы в отношении
            стилистики.
          В большинстве таких случаев невозможно обосновать, почему следует писать именно так, а не иначе, потому споры
            о том, какие, например, правильно использовать кавычки — одинарные или двойные — могут длиться до бесконечности,
            забирая огромное количество времени и сил, необходимых для разработки веб-продуктов.
          В таких случаях мы мы, как исследователи и опытные веб-инженеры, оставляем за собой право устанавливать правила
            на основе личным предпочтениям.
          Если Вы с чем-то не согласно, то всегда можете модифицировать настройки предлагаемого пресета.
