extends ../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/Minimal/MinimalLayout.pug


block append Requirements

  include ../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("ESLint"),
        description: ""
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/Minimal/MinimalLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents",
        "@Pages/Top/TopPage"
      ]
    });

    RoutingEmulator.setCurrentRoute("top");

    LanguageDropDownList__YDF_DK.setLinks({
      english: "./../index.html",
      japanese: "./TopPage.japanese.html"
    });


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  main.TopPage

    .TopPage-ImageAndTopHeadingGroup

      img.TopPage-ImageAndTopHeadingGroup-Image(
        src="@Shared/Icons/YDSG_Icon.svg"
        alt="Иконка «Yamato Daiwa Styles Guides»"
      )

      h1.TopPage-ImageAndTopHeadingGroup-Heading
        span.TopPage-ImageAndTopHeadingGroup-Heading-FirstLine Yamato Daiwa
        span.TopPage-ImageAndTopHeadingGroup-Heading-SecondLine Style Guides

    p.TopPage-ShortDescription-Heading.
      Пресеты ESLint и pug-lint.
      Отличаются крайне строгими настройками, рассчитанными на максимальное качество кода.

    +CompactTableOfContents--YDF_DK(localizedRouting).TopPage-TableOfContents

    article

      h2.Article-Heading2 Особенности пресета

      p.Article-Paragraph.
        Пресет отличается строгостью, не прощает лени и завершения на спешно набросанном черновом коде.
        Например, пресет для #[+ImportantEntity--YDID ESLint] для #[+ImportantEntity--YDID TypeScript] требует
          #[+Term--YDID аннотации типов] в #[+ImportantEntity--YDID 100%] случаев, а
          использование #[+Keyword--YDID ключевого слова] #[+ImportantEntity__Code--YDID as] не&nbsp;допускается.


      h2.Article-Heading2 Важные психологические моменты

      p.Article-Paragraph.
        Перед тем, как начать тратить бесценное время на #[+Keyword--YDID бесполезные] споры типа «нужно ли аннотировать
          TypeScript-типы во всех случаях без исключений?» или «можно ли иногда использовать тип
          #[+SecondaryEntity__Code--YDID any]?», следует разъяснить некоторые #[+Keyword--YDID психологические] моменты,
          которые #[+Keyword--YDID обычно] игнорируются даже опытными инженерами.

      h3.Article-Heading3 Фокус на сиюминутной выгоде

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error,
      }).
        Из сиюминутной меньшей выгоды и будущей большей выгоды человеческая психика склонна выбирать первое.

      p.Article-Paragraph.
        В программировании, разработчики часто предпочитают на скорою руку написать небережный код и тем самым
          побыстрее отделаться от работы в надежде на то, что «авось, я будущем не буду править этот код» или «авось,
          потом как-нибудь отрефакторим».
        Казалось бы, излишне говорить, что такой подход неприемлем (особенно для сегмента рынка
          «высокая качество — высокое цена»), но ввиду психологии описанное выше явление носит массовый характер, а
          потому сказать придётся, даже если это покажется банальным.

      p.Article-Paragraph.
        В коммерческом программировании ири создании любых программных продуктов, будет то сайт, нативное приложение
          или игра, не бывает такого, что «сделал — и забыл».
        Начинающие программисты и менеджеры часто ошибочно воспринимают первый релиз продукта как
          «конец, после которого можно расслабиться и получать прибыль», даже не&nbsp;подозревая, что это на самом деле
          это только начало, а разработка первой версии была лишь прелюдией.
        Как только программный продукт становится доступен публике, сразу же начинают поступать многочисленные запросы
          о добавлении новой функциональности, изменении уже существующей, а также обнаруживаются ошибки,
          не&nbsp;замеченные в процессе тестирования.
        Если команда разработки в сотрудничестве с командой техподдержки не&nbsp;будет быстро реагировать
          на обратную связь от клиентов, клиенты будут разочарованы и быстро потеряны.
        Однако если качество кода низкое, то стоимость добавления нового кода и изменения уже существующего начнёт резко
          расти, пока не&nbsp;поглотит всю прибыль.

      p.Article-Paragraph.
        Что касается рефакторинга, то в его отношении существует один интересный парадокс, о котором если бы знали,
          то не возлагали на него больших надежд.

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error,
      }) Чем ниже качество начального кода, тем меньше он поддаётся рефакторингу.

      p.Article-Paragraph.
        Таким образом, от рефакторинга ожидают именно того, для чего он не&nbsp;походит — значительного улучшения
          низкокачественного кода.
        Причин тому несколько:

      ul.Article-UnorderedList

        li.
          Чтобы выполнить рефакторнг кода, нужно его хорошо знать.
          А если поддерживает код не&nbsp;тот, кто его писал (а зачастую это именно так), то разобраться в некачественном
            коде крайне трудно, потребуется большое количество времени (без консультаций с авторами кода — крайне
            большое).
          Но даже если поддерживать низкокачественный код будет его автор, то и ему будет крайне разобраться в своём же
            коде, если он некоторое время не будет с ним контактировать.

        li.
          На этапе разработке начальной версии программного продукта менеджеры, составляющие график работ, ошибочно
            полагают, что после релиза первой версии у них будет достаточно времени на рефакторинг.
          К тому же, они недооценивают затраты времени, которое нужно на рефакторнг некачественного кода.

        li.
          Отказ от рефакторинга некоторых участков кода из-за опасений вызывать новые баги.
          Ввиду того, что в некачественном коде трудно (а иногда и невозможно в отведённое время) разобраться,
            такие опасения вполне оправданы, а рефакторинг вопреки этим опасениям действительно часто приводит к багам.

      p.Article-Paragraph.
        В общем, плата за выбор сиюминутной выгоды может оказаться запредельно высокой вплоть до коммерческого провала
          программного продукта, утраты клиентской базы, банкротства и потерей рабочих мест.
        Чтобы этого избежать, менеджеры и ведущие инженеры должны не&nbsp;только сформировать привычку ориентироваться
          на будущую выгоду, но и #[+Keyword--YDID принуждать] к этому всю команду.


      h3.Article-Heading3 Особенности начинающих программистов

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      }).
        Начинающие программисты часто просто не&nbsp;думают о том, что другие программисты будут читать и, возможно,
          править их код

      p.Article-Paragraph.
        Начинающие программисты сфокусированы лишь на том, чтобы код хоть как-то работал, при этом совершенно
          не&nbsp;думают о будущем этого кода.
        Дело здесь не&nbsp;только в описанной выше склонности к выбору сиюминутной выгоде, но и в том, что
          #[+Term--YDID сознание] #[+Keyword--YDID перегружено], и в нём уже не остаётся место для заботе о
          поддерживалось кода.
        Повторять код за учителем из видеоурока достаточно просто, но кода программист пытается написать что-то своё,
          происходит кардинально перестроение мышления, где большие умственные усилия неизбежны.

      p.Article-Paragraph.
        По мере увеличения опыта, базовые навыки в программировании постепенно переходят в подсознание.


      h3.Article-Heading3 Особенности опытных программистов

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      }).
        По мере увеличения опыта, для программистов многие вещи становятся очевидным.
        В результате, он стараются убрать из кода всё то, что #[+Keyphrase--YDID с их точки] зрения очевидно,
          «чтобы было чище», что повышает стоимость вовлечения нового программиста в команду.

      p.Article-Paragraph.
        Именно этот феномён обычно игнорируют, когда говорят, что «не&nbsp;нужно аннотировать все типы в TypeScript,
          потому что зачастую они и так очевидны, а потому только засоряют код» или «в #[+ImportantEntity--YDID C#]
          следует отдавать предпочтение ключевому слову #[+ImportantEntity__Code--YDID var], а ключевое слово
          #[+ImportantEntity__Code--YDID this] или имя класса при обращении к статическим членам класса использовать
          незачем».
        Опытным программистам, разумеется, всё очевидно, но

      +AdmonitionBlock--YDF({
        geometricVariation: AdmonitionBlock__YDF.GeometricVariations.stickyNoteLike,
        decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.error
      }).
        Для того, чтобы минимизировать затраты на поддержку кода, он должен быть очевиден для программистов
          со средним и малым опытом.


      h2.Article-Heading2 О создании гайдлайнов и их создателе

      p.Article-Paragraph.
        Скажу начистоту: я ни с кем не&nbsp;советовался по поводу опубликованных здесь рекомендаций и ничьего мнения
          не спрашивал (за исключением редких случаев).
        Более того, я прекрасно знаю, что во многих моментах, например как следует именовать директории или стоит ли
          во всех случаях аннотировать #[+Term--YDID типы] в #[+ImportantEntity--YDID TypeScript], я расхожусь с
          общепринятыми взглядами и даже с официальными гайдлайнами Microsoft и Google.

      p.Article-Paragraph.
        Но я видим, что происходит на IT рынке: большая часть проектов проваливается, а #[+Keyword--YDID крайне]
          #[+Keyword__Contrast--YDID низкое] качество как кода, так и разрабатываемых программных продуктов в целом
          несмотря на высокие цены — в порядке вещей.
        Чтобы получить качественно другой результат, мы считаем своей миссией взглянуть #[+Keyword--YDID критически] на
          устоявшиеся нормы написания кода и что-то изменить.

      p.Article-Paragraph.
        Но что стоит за тем, что берём на себя полномочия создавать гайдлайны?

      ul.Article-UnorderedList
        li.
          Мы пишем логику сайтов и веб-приложения (т. е. программирование клиентской части) с 2016 года, когда стандарт
            ES6 уже появился, но ES5 ещё был актуален.
        li C этого же года мы работаем с NodeJS как со средством автоматизации.
        li Мы используем Node.js для серверного программирования с 2019.
        li.
          Мы изучаем каждое правило ESLint с 2020.
          Приведённые ниже гайдлайны появились в это время, но изменялись мало ввиду того, что показали хороший результат.

      p.Article-Paragraph.
        Многие слышали про цикл PDCA, но мало кто использует его на практике.


      p.Article-Paragraph.
        Качественный код — вот доказательство того, что мы идём в правильном направлении.
        Если Вы хотите самостоятельно оценить качество нашего кода, то можете посмотреть исходный код наших библиотек
          и фреймворков на GitHub.
        #[+Keyphrase--YDID Все они используют те пресеты, которые опубликованы на этом сайте].

      //- TODO


      p.Article-Paragraph.
        И хотя качество - понятие размытое, на этом показателе основываются такие более понятные как:

      ol.Article-OrderedList

        li Срок жизни приложения
        li Стоимость и время добавления нового функционала
        li Суммарное колиество багов на страницу сайта/приложения
        li Среднее время на поиск причины бага
        li Среднее время на исправление бага
        li Стоимость и время вовлечения нового инженера в проект


      h3.Article-Heading3 Субъективизм

      p.Article-Paragraph.
        Часть правил нацелены на соблюдение валидности кода, а потому необходимость в их соблюдении в обосновании и
          не&nbsp;нуждается.
        Однако языки, к котом имеют отношение описанные здесь гайдлайны, дают достаточно много свободы в отношении
          стилистики.
        В большинстве таких случаев невозможно обосновать, почему следует писать именно так, а не иначе, потому споры
          о том, какие, например, правильно использовать кавычки — одинарные или двойные — могут длиться до бесконечности,
          забирая огромное количество времени и сил, необходимых для разработки веб-продуктов.
        В таких случаях мы мы, как исследователи и опытные веб-инженеры, оставляем за собой право устанавливать правила
          на основе личным предпочтениям.
        Если Вы с чем-то не согласно, то всегда можете модифицировать настройки предлагаемого пресета.


      h3.Article-Heading3 Организационные моменты
      h4.Article-Heading4 Ревью кода опытными инженерами обязательно

      p.Article-Paragraph.
        Хотя линтеры часто называют «инструментами контроля качества кода», контроль качества крайне ограничен.
        Нельзя, например, выявить с помощью линтера непонятные имена переменных и функций, запутанную структуру кода,
          распределение ответственности между классами и функциями, а именно такие качественные показатели во многом
          характеризуют качество кода.
        Поэтому, линтеры нельзя воспринимать как средство автоматизации контроля качества, которое заменит ревью исходного
          кода опытным инженером.

      p.Article-Paragraph.
        Линтеры следует воспринимать скорее как средство #[+Keyword--YDID предварительной] проверки кода, чтобы
          опытный инженер во время ревью занимался выявлением таких проблем, которые невозможно выявить в автоматическом
          режиме (примеры приведены выше).

      h4.Article-Heading4 Установил линтер — следи за соблюдением

      p.Article-Paragraph.
        Ввести правила — относительно легко, а вот обеспечить контроль за их соблюдением — это то, чего обычно
          не&nbsp;делают или делают плохо.
        Тоже и с использованием линтеров — нам неоднократно приходилось наблюдать во времена работы по аутсорсингу
          (до основания своей компании), как ESLint и аналогичные инструменты вроде бы и используются, но при этом
          если запустить линтинг, то ошибки и предупреждения исчисляются десятками (а иногда и сотнями).
        Когда всё запущено до такой степени, то свои ошибки уже теряются среди ошибок, допущенных другими членами команды,
          а потому использованием ESLint теряет смысл.

      p.Article-Paragraph.
        Что же делать?
        Правило такое: если есть хотя бы одна ошибка или хотя бы одно предупреждение ESLint, то пулл-риквест тут
          тут же отклоняется и инженер обязан эти ошибки устранить, прежде чем пулл-риквест посмотрит человек.
        На многих сервисы включая GitHub можно автоматически запустить ESLint при создании пулл-риквеста, соответственно
          если опытных инженер видит, что имеются какие-либо нарушения, то он ревью не начинает.


      h2.Article-Heading2 О создателях гайдлайнов

      p.Article-Paragraph.
        Пресет разработан создателем японского стартапа Yamato Daiwa Такэси Токугавой.
        До основания стартапа он не только 7 лет (проверить) занимался веб-разработкой по аутсорсингу, но и
          разрабатывал различные библиотеки фреймворки.

      p.Article-Paragraph.
        Разработка пресета началась в 2018 году.
        С тех под пресет использовался во многочисленных проектах (как при работе по аутсорсингу)...
        Был несколько раз полностью пересмотрен и продолжает улучшаться по сей день.
